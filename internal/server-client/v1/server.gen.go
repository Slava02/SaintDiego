// Package clientv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package clientv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/Slava02/SaintDiego/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// TestHandlerRequest defines model for TestHandlerRequest.
type TestHandlerRequest struct {
	Greeting *string `json:"greeting,omitempty"`
}

// TestHandlerResponse defines model for TestHandlerResponse.
type TestHandlerResponse struct {
	Answer string `json:"answer"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostTestHandlerParams defines parameters for PostTestHandler.
type PostTestHandlerParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostTestHandlerJSONRequestBody defines body for PostTestHandler for application/json ContentType.
type PostTestHandlerJSONRequestBody = TestHandlerRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /testHandler)
	PostTestHandler(ctx echo.Context, params PostTestHandlerParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostTestHandler converts echo context to params.
func (w *ServerInterfaceWrapper) PostTestHandler(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTestHandlerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Request-ID", valueList[0], &XRequestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTestHandler(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/testHandler", wrapper.PostTestHandler)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7STzW7bOhCFX0WYe5eSKdttfrRLYxRxgQBBEqABAi9oaWyxkEhmOHITGHr3gqRcy0m2",
	"XQkiZ84cfjzcQ2laazRqdlDswUqSLTJS+Hu6x5cOHS8XNygrJL+Gr7K1DUIB06/T6kyelVl5Pj3Lvszl",
	"OrucbzbZel2dX1Szy8t8dg4pKA0F1LE/BS1b3/uUDdLZcgEpEL50irCCgqnDFFxZYyv9uI2hVjIU0HWq",
	"ghT4zfp+x6T0FlJ4zbYmGxb9x03+eh7vZqq1hjgekWsoYKu47taT0rTioZE7mc/Eg1SaFwq3RijNSFo2",
	"ImhC3/f9wVUg84iOb6SuGqRhXpAmY5FYYajZEiJ7l8X+ne2gdiLhrNEOP2pI7X5H7u8VxtCeD3WrYBPL",
	"jhS/PXi7UWaNkpCuOn/yw9/3A9kfPx9hOJyfEHePqGtmGx0rvTHBiuIQgCOv5Pr+NrluFGpOru6WkMIO",
	"ySnjr343hT4FY1FLq6CA+SSfzCEN9xDMCT6SCARMpFmhK0lZjjJLrVjJJqljYbIxlPjGxHZkjUM3gTCF",
	"pG9YVlDAnXE8ohxmHuP9vIf/CTdQwH/i+AjEsUR8iH+/itTR8TdTvXmTpdGMOviV1jaqDOPFL+dN70dB",
	"/mzWECjxSZr60xv2zyIsxKAEbrM8/zcOhjAGC6eXcIvOyS26pFGOJ+FZjAIXmI6j9rzyxBzS7kD8VG6B",
	"O2yMbX1sYhWk0FEzpK4QojGlbGrjuLjIL3Lhs7Tq/wQAAP//uNoKQbUEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
