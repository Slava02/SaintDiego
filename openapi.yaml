openapi: 3.0.0
info:
  title: Saint Egidio Admin API
  description: API для управления временными слотами, локациями и услугами в административной панели Saint Egidio
  version: 1.0.0

servers:
  - url: /api
    description: API сервер

components:
  schemas:
    TimeSlot:
      type: object
      required:
        - id
        - title
        - type
        - locationId
        - location
        - capacity
        - startDate
        - endDate
        - status
        - services
      properties:
        id:
          type: string
          example: "ts_1234567890"
        title:
          type: string
          example: "Медицинская консультация"
        type:
          type: string
          enum: [single, recurring]
        locationId:
          type: string
          example: "loc_1234567890"
        location:
          type: string
          example: "Цветной"
        capacity:
          type: integer
          minimum: 1
          example: 20
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, archived]
        services:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlotService'
        recurrence:
          $ref: '#/components/schemas/Recurrence'

    TimeSlotService:
      type: object
      required:
        - serviceId
        - capacity
        - bookingWindow
        - time
      properties:
        serviceId:
          type: string
          example: "srv_1234567890"
        capacity:
          type: integer
          minimum: 1
          example: 10
        bookingWindow:
          type: integer
          minimum: 1
          example: 7
        time:
          type: string
          example: "10:00-12:00"

    Recurrence:
      type: object
      required:
        - frequency
        - interval
        - endType
      properties:
        frequency:
          type: string
          enum: [daily, weekly, monthly]
        interval:
          type: integer
          minimum: 1
          example: 1
        endType:
          type: string
          enum: [never, date]
        endValue:
          type: string
          format: date-time
          nullable: true

    Location:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: "loc_1234567890"
        name:
          type: string
          example: "Цветной"
        address:
          type: string
          example: "ул. Цветной бульвар, 1"

    Service:
      type: object
      required:
        - id
        - name
        - type
        - defaultCapacity
        - defaultBookingWindow
      properties:
        id:
          type: string
          example: "srv_1234567890"
        name:
          type: string
          example: "Медицинская консультация"
        type:
          type: string
          enum: [medical, psychology, clothing, food, legal, other]
        defaultCapacity:
          type: integer
          minimum: 1
          example: 10
        defaultBookingWindow:
          type: integer
          minimum: 1
          example: 7
        description:
          type: string
          example: "Консультация врача общей практики"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Validation failed"
        details:
          type: object
          additionalProperties: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

paths:
  /time-slots:
    get:
      summary: Получение списка временных слотов
      description: Возвращает список временных слотов с возможностью фильтрации
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа

    post:
      summary: Создание нового временного слота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - type
                - locationId
                - capacity
                - startDate
                - endDate
                - services
              properties:
                title:
                  type: string
                type:
                  type: string
                  enum: [single, recurring]
                locationId:
                  type: string
                capacity:
                  type: integer
                  minimum: 1
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                services:
                  type: array
                  items:
                    $ref: '#/components/schemas/TimeSlotService'
                recurrence:
                  $ref: '#/components/schemas/Recurrence'
      responses:
        '201':
          description: Временной слот успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа

  /time-slots/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    
    put:
      summary: Обновление временного слота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlot'
      responses:
        '200':
          description: Временной слот успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Временной слот не найден

    delete:
      summary: Удаление временного слота
      responses:
        '200':
          description: Временной слот успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: Временной слот не найден

  /time-slots/{id}/archive:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    
    patch:
      summary: Архивация временного слота
      responses:
        '200':
          description: Временной слот успешно архивирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '404':
          description: Временной слот не найден

  /time-slots/{id}/activate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    
    patch:
      summary: Активация временного слота
      responses:
        '200':
          description: Временной слот успешно активирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '404':
          description: Временной слот не найден

  /locations:
    get:
      summary: Получение списка локаций
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа

    post:
      summary: Создание новой локации
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                address:
                  type: string
      responses:
        '201':
          description: Локация успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа

  /services:
    get:
      summary: Получение списка услуг
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа 