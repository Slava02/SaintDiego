// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateTimeSlotRequestType.
const (
	CreateTimeSlotRequestTypeRecurring CreateTimeSlotRequestType = "recurring"
	CreateTimeSlotRequestTypeSingle    CreateTimeSlotRequestType = "single"
)

// Defines values for RecurrenceEndType.
const (
	Date  RecurrenceEndType = "date"
	Never RecurrenceEndType = "never"
)

// Defines values for RecurrenceFrequency.
const (
	Daily   RecurrenceFrequency = "daily"
	Monthly RecurrenceFrequency = "monthly"
	Weekly  RecurrenceFrequency = "weekly"
)

// Defines values for TimeSlotStatus.
const (
	TimeSlotStatusActive   TimeSlotStatus = "active"
	TimeSlotStatusArchived TimeSlotStatus = "archived"
)

// Defines values for TimeSlotType.
const (
	TimeSlotTypeRecurring TimeSlotType = "recurring"
	TimeSlotTypeSingle    TimeSlotType = "single"
)

// Defines values for GetTimeSlotsParamsStatus.
const (
	GetTimeSlotsParamsStatusActive   GetTimeSlotsParamsStatus = "active"
	GetTimeSlotsParamsStatusArchived GetTimeSlotsParamsStatus = "archived"
)

// CreateLocationRequest defines model for CreateLocationRequest.
type CreateLocationRequest struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// CreateTimeSlotRequest defines model for CreateTimeSlotRequest.
type CreateTimeSlotRequest struct {
	Capacity   int32                     `json:"capacity"`
	EndDate    time.Time                 `json:"endDate"`
	LocationId int64                     `json:"locationId"`
	Recurrence *Recurrence               `json:"recurrence,omitempty"`
	Services   []TimeSlotService         `json:"services"`
	StartDate  time.Time                 `json:"startDate"`
	Title      string                    `json:"title"`
	Type       CreateTimeSlotRequestType `json:"type"`
}

// CreateTimeSlotRequestType defines model for CreateTimeSlotRequest.Type.
type CreateTimeSlotRequestType string

// Error defines model for Error.
type Error struct {
	Code    string  `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// Location defines model for Location.
type Location struct {
	Address *string `json:"address,omitempty"`
	Id      int64   `json:"id"`
	Name    string  `json:"name"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {
	EndType   RecurrenceEndType   `json:"endType"`
	EndValue  *time.Time          `json:"endValue"`
	Frequency RecurrenceFrequency `json:"frequency"`
	Interval  int32               `json:"interval"`
}

// RecurrenceEndType defines model for Recurrence.EndType.
type RecurrenceEndType string

// RecurrenceFrequency defines model for Recurrence.Frequency.
type RecurrenceFrequency string

// ServiceType defines model for ServiceType.
type ServiceType struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Capacity   int32             `json:"capacity"`
	EndDate    time.Time         `json:"endDate"`
	Id         int64             `json:"id"`
	LocationId int64             `json:"locationId"`
	Recurrence *Recurrence       `json:"recurrence,omitempty"`
	Services   []TimeSlotService `json:"services"`
	StartDate  time.Time         `json:"startDate"`
	Status     TimeSlotStatus    `json:"status"`
	Title      string            `json:"title"`
	Type       TimeSlotType      `json:"type"`
}

// TimeSlotStatus defines model for TimeSlot.Status.
type TimeSlotStatus string

// TimeSlotType defines model for TimeSlot.Type.
type TimeSlotType string

// TimeSlotService defines model for TimeSlotService.
type TimeSlotService struct {
	BookingWindow int32     `json:"bookingWindow"`
	Capacity      int32     `json:"capacity"`
	ServiceTypeId int64     `json:"serviceTypeId"`
	Time          time.Time `json:"time"`
}

// GetTimeSlotsParams defines parameters for GetTimeSlots.
type GetTimeSlotsParams struct {
	Status    *GetTimeSlotsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	StartDate *time.Time                `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate   *time.Time                `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// GetTimeSlotsParamsStatus defines parameters for GetTimeSlots.
type GetTimeSlotsParamsStatus string

// PostLocationsJSONRequestBody defines body for PostLocations for application/json ContentType.
type PostLocationsJSONRequestBody = CreateLocationRequest

// PostTimeSlotsJSONRequestBody defines body for PostTimeSlots for application/json ContentType.
type PostTimeSlotsJSONRequestBody = CreateTimeSlotRequest

// PutTimeSlotsIdJSONRequestBody defines body for PutTimeSlotsId for application/json ContentType.
type PutTimeSlotsIdJSONRequestBody = TimeSlot

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка локаций
	// (GET /locations)
	GetLocations(ctx echo.Context) error
	// Создание новой локации
	// (POST /locations)
	PostLocations(ctx echo.Context) error
	// Получение списка услуг
	// (GET /services)
	GetServices(ctx echo.Context) error
	// Получение информации об услуге по идентификатору
	// (GET /services/{id})
	GetServicesId(ctx echo.Context, id int64) error
	// Получение списка временных слотов
	// (GET /timeSlots)
	GetTimeSlots(ctx echo.Context, params GetTimeSlotsParams) error
	// Создание нового временного слота
	// (POST /timeSlots)
	PostTimeSlots(ctx echo.Context) error
	// Удаление временного слота
	// (DELETE /timeSlots/{id})
	DeleteTimeSlotsId(ctx echo.Context, id int64) error
	// Получение временного слота по идентификатору
	// (GET /timeSlots/{id})
	GetTimeSlotsId(ctx echo.Context, id int64) error
	// Обновление временного слота
	// (PUT /timeSlots/{id})
	PutTimeSlotsId(ctx echo.Context, id int64) error
	// Активация временного слота
	// (PATCH /timeSlots/{id}/activate)
	PatchTimeSlotsIdActivate(ctx echo.Context, id int64) error
	// Архивация временного слота
	// (PATCH /timeSlots/{id}/archive)
	PatchTimeSlotsIdArchive(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx)
	return err
}

// PostLocations converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocations(ctx)
	return err
}

// GetServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetServices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServices(ctx)
	return err
}

// GetServicesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetServicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServicesId(ctx, id)
	return err
}

// GetTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimeSlotsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeSlots(ctx, params)
	return err
}

// PostTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) PostTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTimeSlots(ctx)
	return err
}

// DeleteTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTimeSlotsId(ctx, id)
	return err
}

// GetTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeSlotsId(ctx, id)
	return err
}

// PutTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTimeSlotsId(ctx, id)
	return err
}

// PatchTimeSlotsIdActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdActivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdActivate(ctx, id)
	return err
}

// PatchTimeSlotsIdArchive converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdArchive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdArchive(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.POST(baseURL+"/locations", wrapper.PostLocations)
	router.GET(baseURL+"/services", wrapper.GetServices)
	router.GET(baseURL+"/services/:id", wrapper.GetServicesId)
	router.GET(baseURL+"/timeSlots", wrapper.GetTimeSlots)
	router.POST(baseURL+"/timeSlots", wrapper.PostTimeSlots)
	router.DELETE(baseURL+"/timeSlots/:id", wrapper.DeleteTimeSlotsId)
	router.GET(baseURL+"/timeSlots/:id", wrapper.GetTimeSlotsId)
	router.PUT(baseURL+"/timeSlots/:id", wrapper.PutTimeSlotsId)
	router.PATCH(baseURL+"/timeSlots/:id/activate", wrapper.PatchTimeSlotsIdActivate)
	router.PATCH(baseURL+"/timeSlots/:id/archive", wrapper.PatchTimeSlotsIdArchive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZXW8TRxf+K6t538stdoBWyHeh0CotahGJygXKxWT3JB7YL2ZnDW5kKR/QUhWVituq",
	"VBV/wBhcHJKYv3D2H1Uzs94PexOvm8SiNHfr9XycOc9znnlmdpNYvhv4HngiJI1NElpNcKl6/JwDFXDD",
	"t6hgvncL7kcQCvlHwP0AuGCgmlHb5hCqR9EOgDRIKDjzNkjHJB51oeSPjkk43I8YB5s07uhWZjrQqjlq",
	"76/dBUvIgXQsK8yFZccXR8Zi0YBaTLTl87rPXSpIgzBPXLpI0kGZJ2ADuBwVPPsaFVBobVMBnwimIppY",
	"j5MkY8ken+Gzy6UzcLAizsGz1CT/57BOGuR/tSzntSThtVtZy45JQuAtZulFMQFuOK37KDXLuqMcI4mG",
	"ck7bakxBuZhtvYIJB0qR1S82CXiRKzEMmbfhyDH0imWrVXMK7nr0pFUhuWaGZD7uDLFchsrocp1zn5fQ",
	"w7fLV2ODoMwp57ALYUg3KtBYjZ61L4trVEyzVRGryrZq5cZkflXTshBvFRhbDBI8e2UMdw9awImpaFSC",
	"uELsO+pER5POixyHrkmaCR5ByQjrMnjwrHZ+XpsyR5LjAcA99eD6nmg67dIYZIp4izqlsuAyj7ly0IXJ",
	"lI5lLoskN6aZpqUsnUk9jtJWzOdcgR0pxPxVs/Iy/2vyGgoqojBPa2oJ1lKbIbearAV2KZ/PVpYVjU6m",
	"zXpdU0R6PKcTvFzz/XvM27jNPNt/UJGcM3I5zMqzMukUmhUxHkttcbpCJouLTWaZTJuK2Yo4E+1lyU2d",
	"qatAOfDFSDRV3tSvL0bhfXV7RUKhWpNG8m8WalOIgHQ6SibXfdnfhtDiLNAbFVm8uWTgG9yPnxnxLr6P",
	"t7CLPdzHPh7iIH5mYC/ewj4eqBeH8c94gAMj3sZ9HMY72JU/TUP+wnfYjX+QfVQT2WpXtot38bVuZ2DP",
	"wC6+kc9q9O14R84X7+AAe3iIQ9wz8D128RD7uI8DY5kyTxjXN5jN/JS1DZJ/bSzaLvOMxZtLxCQt4KFe",
	"1sKF+oW6hNMPwKMBIw1ySb0ySUBFU6W1NqK9+rUBSjslQ1OVIl+CuJE2kmCHge+FGpWL9bp2HZ4AT/Wl",
	"QeAw3bp2N9Q+QEtMZSVKLYS0JvThku6zUK+PK1JH+Zo8kvgy3sb32I+fKJz2DIVQD/vxjhztcn1hEn38",
	"HfsSk168g8N4Cwf4FofYkxDoPpfK+8Q7kjRDheCuhExTN3JdytuyzR84lNDHP2oiYd9QwQ3ibcmTAmFw",
	"T04V+GFJ/m/64RgA6mhw1bfbM+X+uJSXH4Q6xeKW5qUzQYCFUwsiw70E2N/y1aXLKsEZhzKvQ3yLb1TZ",
	"dDVq9VOLS1vtsqBexE9wgK80nJIx+ziQUShIBznGnXEclRh89jFMrYg/czDJelB619Oal6+GgepYy3uY",
	"o6RpedRmHsqUt7pnJU7nVKkintm+WqRKbZPZnSp8UeYkoJy6IICHpHFnk8DDwFHn53XqhCDdAmmorXJ0",
	"6Gho51iURDOXjwreKhRttYGHzA0cIJ3VExK3Ml9nJOQ0OKR/iR8pEh2MytbAIb7Ke56+9DJDQ6liHw+l",
	"y4kf4UAVuiJgvKvxE4lTztf6WLDPlXj0lFv6CbuKQyknhvhuwqbFjzOTNsSeEW8bSmze4gEO8S8pPop/",
	"T+NfDBXVfvw0cWNahMxJ+qykcR7NHk0KRZ77EfB2xp7s1JDCN9uxaEQeyTPSMatOmh5gSpg65fg2+3y5",
	"Q9KJZludh6KnVwazy/m3X89Ntb/xhUEj0fQ5+x7suQm1mtayIAzllJ/Ow1IteQK4Rx1DCjpwA5KGMxnr",
	"43XgeKedL/Czc9rj1/xzdtoZ60s2hef57ClvNsrecbb73HT/60z3a7kz98bQfq1xTa42xjbn1F3Z4IC+",
	"BixW0DX1Pq2hj8ZkFW/twkiLYnY9ueb7DlBPpWv8OutEFbargFNXUZpVl8uc0dHj4aFGvIt72oKNs+Nl",
	"NoFmxzRCmEda648P9jPQ0A9LJ0+bTSXHhOP5VOV8YJIgKtutow+VcafvGopkm2YU6h+aUZDHwmTbyUnZ",
	"x1oEL4qLrSark/tsTR0Jk69tARVWs6QG5OtcFSyOupzrb1VqdvFd8vFlEG8VHdxpE+PXdKrRPfY/ooW+",
	"IJiFFUmPc1JUJkW8FT+eEynSqaqTIveJVOGY/zh6Z1VmWB+fNcrFYK9BCxw/cMETySGbmCTiTvKdNGzU",
	"1DdBp+mHonGlfqVeay2Qzmrn7wAAAP//oXczPkcnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
