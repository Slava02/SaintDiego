// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/Slava02/SaintDiego/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateTimeSlotRequestType.
const (
	CreateTimeSlotRequestTypeRecurring CreateTimeSlotRequestType = "recurring"
	CreateTimeSlotRequestTypeSingle    CreateTimeSlotRequestType = "single"
)

// Defines values for RecurrenceEndType.
const (
	Date  RecurrenceEndType = "date"
	Never RecurrenceEndType = "never"
)

// Defines values for RecurrenceFrequency.
const (
	Daily   RecurrenceFrequency = "daily"
	Monthly RecurrenceFrequency = "monthly"
	Weekly  RecurrenceFrequency = "weekly"
)

// Defines values for TimeSlotStatus.
const (
	TimeSlotStatusActive   TimeSlotStatus = "active"
	TimeSlotStatusArchived TimeSlotStatus = "archived"
)

// Defines values for TimeSlotType.
const (
	TimeSlotTypeRecurring TimeSlotType = "recurring"
	TimeSlotTypeSingle    TimeSlotType = "single"
)

// Defines values for GetTimeSlotsParamsStatus.
const (
	GetTimeSlotsParamsStatusActive   GetTimeSlotsParamsStatus = "active"
	GetTimeSlotsParamsStatusArchived GetTimeSlotsParamsStatus = "archived"
)

// CreateLocationRequest defines model for CreateLocationRequest.
type CreateLocationRequest struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// CreateServiceTypeRequest defines model for CreateServiceTypeRequest.
type CreateServiceTypeRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// CreateTimeSlotRequest defines model for CreateTimeSlotRequest.
type CreateTimeSlotRequest struct {
	Capacity   int                       `json:"capacity"`
	EndDate    time.Time                 `json:"endDate"`
	LocationId types.LocationID          `json:"locationId"`
	Recurrence *Recurrence               `json:"recurrence,omitempty"`
	Services   []TimeSlotService         `json:"services"`
	StartDate  time.Time                 `json:"startDate"`
	Title      string                    `json:"title"`
	Type       CreateTimeSlotRequestType `json:"type"`
}

// CreateTimeSlotRequestType defines model for CreateTimeSlotRequest.Type.
type CreateTimeSlotRequestType string

// Error defines model for Error.
type Error struct {
	Code    string                  `json:"code"`
	Details *map[string]interface{} `json:"details,omitempty"`
	Message string                  `json:"message"`
}

// Location defines model for Location.
type Location struct {
	Address *string          `json:"address,omitempty"`
	Id      types.LocationID `json:"id"`
	Name    string           `json:"name"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {
	EndType   RecurrenceEndType   `json:"endType"`
	EndValue  *time.Time          `json:"endValue"`
	Frequency RecurrenceFrequency `json:"frequency"`
	Interval  int                 `json:"interval"`
}

// RecurrenceEndType defines model for Recurrence.EndType.
type RecurrenceEndType string

// RecurrenceFrequency defines model for Recurrence.Frequency.
type RecurrenceFrequency string

// ServiceType defines model for ServiceType.
type ServiceType struct {
	Id   types.ServiceTypeID `json:"id"`
	Name string              `json:"name"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Capacity   int               `json:"capacity"`
	EndDate    time.Time         `json:"endDate"`
	Id         types.TimeSlotID  `json:"id"`
	LocationId types.LocationID  `json:"locationId"`
	Recurrence *Recurrence       `json:"recurrence,omitempty"`
	Services   []TimeSlotService `json:"services"`
	StartDate  time.Time         `json:"startDate"`
	Status     TimeSlotStatus    `json:"status"`
	Title      string            `json:"title"`
	Type       TimeSlotType      `json:"type"`
}

// TimeSlotStatus defines model for TimeSlot.Status.
type TimeSlotStatus string

// TimeSlotType defines model for TimeSlot.Type.
type TimeSlotType string

// TimeSlotService defines model for TimeSlotService.
type TimeSlotService struct {
	BookingWindow int                 `json:"bookingWindow"`
	Capacity      int                 `json:"capacity"`
	ServiceTypeId types.ServiceTypeID `json:"serviceTypeId"`
	Time          time.Time           `json:"time"`
}

// GetTimeSlotsParams defines parameters for GetTimeSlots.
type GetTimeSlotsParams struct {
	Status    *GetTimeSlotsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	StartDate *time.Time                `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate   *time.Time                `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// GetTimeSlotsParamsStatus defines parameters for GetTimeSlots.
type GetTimeSlotsParamsStatus string

// PostLocationsJSONRequestBody defines body for PostLocations for application/json ContentType.
type PostLocationsJSONRequestBody = CreateLocationRequest

// PostTimeSlotsJSONRequestBody defines body for PostTimeSlots for application/json ContentType.
type PostTimeSlotsJSONRequestBody = CreateTimeSlotRequest

// PutTimeSlotsIdJSONRequestBody defines body for PutTimeSlotsId for application/json ContentType.
type PutTimeSlotsIdJSONRequestBody = TimeSlot

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка локаций
	// (GET /locations)
	GetLocations(ctx echo.Context) error
	// Создание новой локации
	// (POST /locations)
	PostLocations(ctx echo.Context) error
	// Получение списка услуг
	// (GET /services)
	GetServices(ctx echo.Context) error
	// Получение списка временных слотов
	// (GET /time-slots)
	GetTimeSlots(ctx echo.Context, params GetTimeSlotsParams) error
	// Создание нового временного слота
	// (POST /time-slots)
	PostTimeSlots(ctx echo.Context) error
	// Удаление временного слота
	// (DELETE /time-slots/{id})
	DeleteTimeSlotsId(ctx echo.Context, id string) error
	// Обновление временного слота
	// (PUT /time-slots/{id})
	PutTimeSlotsId(ctx echo.Context, id string) error
	// Активация временного слота
	// (PATCH /time-slots/{id}/activate)
	PatchTimeSlotsIdActivate(ctx echo.Context, id string) error
	// Архивация временного слота
	// (PATCH /time-slots/{id}/archive)
	PatchTimeSlotsIdArchive(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx)
	return err
}

// PostLocations converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocations(ctx)
	return err
}

// GetServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetServices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServices(ctx)
	return err
}

// GetTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimeSlotsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeSlots(ctx, params)
	return err
}

// PostTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) PostTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTimeSlots(ctx)
	return err
}

// DeleteTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTimeSlotsId(ctx, id)
	return err
}

// PutTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTimeSlotsId(ctx, id)
	return err
}

// PatchTimeSlotsIdActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdActivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdActivate(ctx, id)
	return err
}

// PatchTimeSlotsIdArchive converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdArchive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdArchive(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.POST(baseURL+"/locations", wrapper.PostLocations)
	router.GET(baseURL+"/services", wrapper.GetServices)
	router.GET(baseURL+"/time-slots", wrapper.GetTimeSlots)
	router.POST(baseURL+"/time-slots", wrapper.PostTimeSlots)
	router.DELETE(baseURL+"/time-slots/:id", wrapper.DeleteTimeSlotsId)
	router.PUT(baseURL+"/time-slots/:id", wrapper.PutTimeSlotsId)
	router.PATCH(baseURL+"/time-slots/:id/activate", wrapper.PatchTimeSlotsIdActivate)
	router.PATCH(baseURL+"/time-slots/:id/archive", wrapper.PatchTimeSlotsIdArchive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
