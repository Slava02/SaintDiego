// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateTimeSlotRequestType.
const (
	CreateTimeSlotRequestTypeRecurring CreateTimeSlotRequestType = "recurring"
	CreateTimeSlotRequestTypeSingle    CreateTimeSlotRequestType = "single"
)

// Defines values for RecurrenceEndType.
const (
	Date  RecurrenceEndType = "date"
	Never RecurrenceEndType = "never"
)

// Defines values for RecurrenceFrequency.
const (
	Daily   RecurrenceFrequency = "daily"
	Monthly RecurrenceFrequency = "monthly"
	Weekly  RecurrenceFrequency = "weekly"
)

// Defines values for TimeSlotStatus.
const (
	TimeSlotStatusActive   TimeSlotStatus = "active"
	TimeSlotStatusArchived TimeSlotStatus = "archived"
)

// Defines values for TimeSlotType.
const (
	TimeSlotTypeRecurring TimeSlotType = "recurring"
	TimeSlotTypeSingle    TimeSlotType = "single"
)

// Defines values for GetTimeSlotsParamsStatus.
const (
	GetTimeSlotsParamsStatusActive   GetTimeSlotsParamsStatus = "active"
	GetTimeSlotsParamsStatusArchived GetTimeSlotsParamsStatus = "archived"
)

// CreateLocationRequest defines model for CreateLocationRequest.
type CreateLocationRequest struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// CreateTimeSlotRequest defines model for CreateTimeSlotRequest.
type CreateTimeSlotRequest struct {
	Capacity   int                       `json:"capacity"`
	EndDate    time.Time                 `json:"endDate"`
	LocationId int                       `json:"locationId"`
	Recurrence *Recurrence               `json:"recurrence,omitempty"`
	Services   []TimeSlotService         `json:"services"`
	StartDate  time.Time                 `json:"startDate"`
	Title      string                    `json:"title"`
	Type       CreateTimeSlotRequestType `json:"type"`
}

// CreateTimeSlotRequestType defines model for CreateTimeSlotRequest.Type.
type CreateTimeSlotRequestType string

// Error defines model for Error.
type Error struct {
	Code    string  `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// Location defines model for Location.
type Location struct {
	Address *string `json:"address,omitempty"`
	Id      int     `json:"id"`
	Name    string  `json:"name"`
}

// Recurrence defines model for Recurrence.
type Recurrence struct {
	EndType   RecurrenceEndType   `json:"endType"`
	EndValue  *time.Time          `json:"endValue"`
	Frequency RecurrenceFrequency `json:"frequency"`
	Interval  int                 `json:"interval"`
}

// RecurrenceEndType defines model for Recurrence.EndType.
type RecurrenceEndType string

// RecurrenceFrequency defines model for Recurrence.Frequency.
type RecurrenceFrequency string

// ServiceType defines model for ServiceType.
type ServiceType struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Capacity   int               `json:"capacity"`
	EndDate    time.Time         `json:"endDate"`
	Id         int               `json:"id"`
	LocationId int               `json:"locationId"`
	Recurrence *Recurrence       `json:"recurrence,omitempty"`
	Services   []TimeSlotService `json:"services"`
	StartDate  time.Time         `json:"startDate"`
	Status     TimeSlotStatus    `json:"status"`
	Title      string            `json:"title"`
	Type       TimeSlotType      `json:"type"`
}

// TimeSlotStatus defines model for TimeSlot.Status.
type TimeSlotStatus string

// TimeSlotType defines model for TimeSlot.Type.
type TimeSlotType string

// TimeSlotService defines model for TimeSlotService.
type TimeSlotService struct {
	BookingWindow int       `json:"bookingWindow"`
	Capacity      int       `json:"capacity"`
	ServiceTypeId int       `json:"serviceTypeId"`
	Time          time.Time `json:"time"`
}

// GetTimeSlotsParams defines parameters for GetTimeSlots.
type GetTimeSlotsParams struct {
	Status    *GetTimeSlotsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	StartDate *time.Time                `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate   *time.Time                `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// GetTimeSlotsParamsStatus defines parameters for GetTimeSlots.
type GetTimeSlotsParamsStatus string

// PostLocationsJSONRequestBody defines body for PostLocations for application/json ContentType.
type PostLocationsJSONRequestBody = CreateLocationRequest

// PostTimeSlotsJSONRequestBody defines body for PostTimeSlots for application/json ContentType.
type PostTimeSlotsJSONRequestBody = CreateTimeSlotRequest

// PutTimeSlotsIdJSONRequestBody defines body for PutTimeSlotsId for application/json ContentType.
type PutTimeSlotsIdJSONRequestBody = TimeSlot

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка локаций
	// (GET /locations)
	GetLocations(ctx echo.Context) error
	// Создание новой локации
	// (POST /locations)
	PostLocations(ctx echo.Context) error
	// Получение списка услуг
	// (GET /services)
	GetServices(ctx echo.Context) error
	// Получение информации об услуге по идентификатору
	// (GET /services/{id})
	GetServicesId(ctx echo.Context, id int) error
	// Получение списка временных слотов
	// (GET /timeSlots)
	GetTimeSlots(ctx echo.Context, params GetTimeSlotsParams) error
	// Создание нового временного слота
	// (POST /timeSlots)
	PostTimeSlots(ctx echo.Context) error
	// Удаление временного слота
	// (DELETE /timeSlots/{id})
	DeleteTimeSlotsId(ctx echo.Context, id int) error
	// Получение временного слота по идентификатору
	// (GET /timeSlots/{id})
	GetTimeSlotsId(ctx echo.Context, id int) error
	// Обновление временного слота
	// (PUT /timeSlots/{id})
	PutTimeSlotsId(ctx echo.Context, id int) error
	// Активация временного слота
	// (PATCH /timeSlots/{id}/activate)
	PatchTimeSlotsIdActivate(ctx echo.Context, id int) error
	// Архивация временного слота
	// (PATCH /timeSlots/{id}/archive)
	PatchTimeSlotsIdArchive(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx)
	return err
}

// PostLocations converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocations(ctx)
	return err
}

// GetServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetServices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServices(ctx)
	return err
}

// GetServicesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetServicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServicesId(ctx, id)
	return err
}

// GetTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimeSlotsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeSlots(ctx, params)
	return err
}

// PostTimeSlots converts echo context to params.
func (w *ServerInterfaceWrapper) PostTimeSlots(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTimeSlots(ctx)
	return err
}

// DeleteTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTimeSlotsId(ctx, id)
	return err
}

// GetTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeSlotsId(ctx, id)
	return err
}

// PutTimeSlotsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTimeSlotsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTimeSlotsId(ctx, id)
	return err
}

// PatchTimeSlotsIdActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdActivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdActivate(ctx, id)
	return err
}

// PatchTimeSlotsIdArchive converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTimeSlotsIdArchive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTimeSlotsIdArchive(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.POST(baseURL+"/locations", wrapper.PostLocations)
	router.GET(baseURL+"/services", wrapper.GetServices)
	router.GET(baseURL+"/services/:id", wrapper.GetServicesId)
	router.GET(baseURL+"/timeSlots", wrapper.GetTimeSlots)
	router.POST(baseURL+"/timeSlots", wrapper.PostTimeSlots)
	router.DELETE(baseURL+"/timeSlots/:id", wrapper.DeleteTimeSlotsId)
	router.GET(baseURL+"/timeSlots/:id", wrapper.GetTimeSlotsId)
	router.PUT(baseURL+"/timeSlots/:id", wrapper.PutTimeSlotsId)
	router.PATCH(baseURL+"/timeSlots/:id/activate", wrapper.PatchTimeSlotsIdActivate)
	router.PATCH(baseURL+"/timeSlots/:id/archive", wrapper.PatchTimeSlotsIdArchive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZeN6/Xq91loinfXO7wEAAP//XVeNhjEmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
