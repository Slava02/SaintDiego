// Code generated by my-super-puper-tool. DO NOT EDIT.

package types

import (
	"database/sql/driver"
	"errors"
	"github.com/google/uuid"
)

type TypeSet = interface {
	RequestID | UserID | TimeSlotID | ServiceID | ServiceTypeID | LocationID
}

func Parse[T TypeSet](s string) (T, error) {
	v, err := uuid.Parse(s)
	return T(v), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}

// RequestID type

type RequestID uuid.UUID

func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

var RequestIDNil = RequestID(uuid.Nil)

func (t RequestID) String() string {
	return uuid.UUID(t).String()
}

func (t RequestID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *RequestID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t RequestID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *RequestID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = RequestID(id)
	return nil
}

func (t RequestID) IsZero() bool {
	return t == RequestIDNil
}

func (t RequestID) Validate() error {
	if t.IsZero() {
		return errors.New("zero RequestID")
	}
	return nil
}

func (t *RequestID) Matches(x interface{}) bool {
	other, ok := x.(RequestID)
	if !ok {
		return false
	}
	return *t == other
}

// UserID type

type UserID uuid.UUID

func NewUserID() UserID {
	return UserID(uuid.New())
}

var UserIDNil = UserID(uuid.Nil)

func (t UserID) String() string {
	return uuid.UUID(t).String()
}

func (t UserID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *UserID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t UserID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *UserID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = UserID(id)
	return nil
}

func (t UserID) IsZero() bool {
	return t == UserIDNil
}

func (t UserID) Validate() error {
	if t.IsZero() {
		return errors.New("zero UserID")
	}
	return nil
}

func (t *UserID) Matches(x interface{}) bool {
	other, ok := x.(UserID)
	if !ok {
		return false
	}
	return *t == other
}

// TimeSlotID type

type TimeSlotID uuid.UUID

func NewTimeSlotID() TimeSlotID {
	return TimeSlotID(uuid.New())
}

var TimeSlotIDNil = TimeSlotID(uuid.Nil)

func (t TimeSlotID) String() string {
	return uuid.UUID(t).String()
}

func (t TimeSlotID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *TimeSlotID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t TimeSlotID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *TimeSlotID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = TimeSlotID(id)
	return nil
}

func (t TimeSlotID) IsZero() bool {
	return t == TimeSlotIDNil
}

func (t TimeSlotID) Validate() error {
	if t.IsZero() {
		return errors.New("zero TimeSlotID")
	}
	return nil
}

func (t *TimeSlotID) Matches(x interface{}) bool {
	other, ok := x.(TimeSlotID)
	if !ok {
		return false
	}
	return *t == other
}

// ServiceID type

type ServiceID uuid.UUID

func NewServiceID() ServiceID {
	return ServiceID(uuid.New())
}

var ServiceIDNil = ServiceID(uuid.Nil)

func (t ServiceID) String() string {
	return uuid.UUID(t).String()
}

func (t ServiceID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *ServiceID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t ServiceID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *ServiceID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = ServiceID(id)
	return nil
}

func (t ServiceID) IsZero() bool {
	return t == ServiceIDNil
}

func (t ServiceID) Validate() error {
	if t.IsZero() {
		return errors.New("zero ServiceID")
	}
	return nil
}

func (t *ServiceID) Matches(x interface{}) bool {
	other, ok := x.(ServiceID)
	if !ok {
		return false
	}
	return *t == other
}

// ServiceTypeID type

type ServiceTypeID uuid.UUID

func NewServiceTypeID() ServiceTypeID {
	return ServiceTypeID(uuid.New())
}

var ServiceTypeIDNil = ServiceTypeID(uuid.Nil)

func (t ServiceTypeID) String() string {
	return uuid.UUID(t).String()
}

func (t ServiceTypeID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *ServiceTypeID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t ServiceTypeID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *ServiceTypeID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = ServiceTypeID(id)
	return nil
}

func (t ServiceTypeID) IsZero() bool {
	return t == ServiceTypeIDNil
}

func (t ServiceTypeID) Validate() error {
	if t.IsZero() {
		return errors.New("zero ServiceTypeID")
	}
	return nil
}

func (t *ServiceTypeID) Matches(x interface{}) bool {
	other, ok := x.(ServiceTypeID)
	if !ok {
		return false
	}
	return *t == other
}

// LocationID type

type LocationID uuid.UUID

func NewLocationID() LocationID {
	return LocationID(uuid.New())
}

var LocationIDNil = LocationID(uuid.Nil)

func (t LocationID) String() string {
	return uuid.UUID(t).String()
}

func (t LocationID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *LocationID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t LocationID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *LocationID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = LocationID(id)
	return nil
}

func (t LocationID) IsZero() bool {
	return t == LocationIDNil
}

func (t LocationID) Validate() error {
	if t.IsZero() {
		return errors.New("zero LocationID")
	}
	return nil
}

func (t *LocationID) Matches(x interface{}) bool {
	other, ok := x.(LocationID)
	if !ok {
		return false
	}
	return *t == other
}
