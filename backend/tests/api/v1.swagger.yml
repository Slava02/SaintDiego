openapi: 3.0.0
info:
  title: Saint Egidio Admin API
  description: API для управления временными слотами, локациями и услугами в административной панели Saint Egidio
  version: 1.0.0

servers:
  - url: https://localhost:8080/v1
    description: Development server

paths:
  /time-slots:
    get:
      summary: Получение списка временных слотов
      description: Возвращает список временных слотов с возможностью фильтрации
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/TimeSlot"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Создание нового временного слота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTimeSlotRequest"
      responses:
        "201":
          description: Временной слот успешно создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSlot"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /time-slots/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string

    put:
      summary: Обновление временного слота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeSlot"
      responses:
        "200":
          description: Временной слот успешно обновлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSlot"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Временной слот не найден

    delete:
      summary: Удаление временного слота
      responses:
        "200":
          description: Временной слот успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "404":
          description: Временной слот не найден

  /time-slots/{id}/archive:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string

    patch:
      summary: Архивация временного слота
      responses:
        "200":
          description: Временной слот успешно архивирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSlot"
        "404":
          description: Временной слот не найден

  /time-slots/{id}/activate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string

    patch:
      summary: Активация временного слота
      responses:
        "200":
          description: Временной слот успешно активирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeSlot"
        "404":
          description: Временной слот не найден

  /locations:
    get:
      summary: Получение списка локаций
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Location"
        "401":
          description: Не авторизован
        "403":
          description: Нет доступа

    post:
      summary: Создание новой локации
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLocationRequest"
      responses:
        "201":
          description: Локация успешно создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /services:
    get:
      summary: Получение списка услуг
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/ServiceType"
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Нет доступа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Requests.
    CreateTimeSlotRequest:
      type: object
      required:
        - title
        - type
        - locationId
        - capacity
        - startDate
        - endDate
        - services
      properties:
        title:
          type: string
        type:
          type: string
          enum: [single, recurring]
        locationId:
          type: string
          format: uuid
        capacity:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        services:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlotService"
        recurrence:
          $ref: "#/components/schemas/Recurrence"

    CreateLocationRequest:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
        address:
          type: string

    CreateServiceTypeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          maxLength: 1000

    # Models.
    TimeSlot:
      type: object
      required:
        - id
        - title
        - type
        - locationId
        - capacity
        - startDate
        - endDate
        - status
        - services
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        type:
          type: string
          enum: [single, recurring]
        locationId:
          type: string
          format: uuid
        capacity:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, archived]
        services:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlotService"
        recurrence:
          $ref: "#/components/schemas/Recurrence"

    TimeSlotService:
      type: object
      required:
        - serviceTypeId
        - capacity
        - bookingWindow
        - time
      properties:
        serviceTypeId:
          type: string
          format: uuid
        capacity:
          type: integer
          example: 10
        bookingWindow:
          type: integer
          example: 7
        time:
          type: string
          format: date-time
          example: "10:00-12:00"

    Recurrence:
      type: object
      required:
        - frequency
        - interval
        - endType
      properties:
        frequency:
          type: string
          enum: [daily, weekly, monthly]
        interval:
          type: integer
          minimum: 1
          example: 1
        endType:
          type: string
          enum: [never, date]
        endValue:
          type: string
          format: date-time
          nullable: true

    Location:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Цветной"
        address:
          type: string
          example: "ул. Цветной бульвар, 1"

    ServiceType:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Медицинская консультация"

    # Common.
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Validation failed"
        details:
          type: object
          additionalProperties: true
